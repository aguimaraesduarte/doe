m$Documentary <- factor(m$Documentary)
m$Romance <- factor(m$Romance)
m$Short <- factor(m$Short)
unique(m$mpaa)
m$mpaa <- factor(m$mpaa)
head(melt(m))
head(melt(m, id.vars = c("title", "year", "mpaa")))
tm <- treemap(m,
index=c("year", "mpaa"),
vSize="budget",
vColor="mpaa",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
data(GNI2014)
warnings()
m$budget <- as.numeric(m$budget)
tm <- treemap(m,
index=c("year", "mpaa"),
vSize="budget",
vColor="mpaa",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
m <- na.omit(movies)
m$year <- factor(m$year, min(m$year):max(m$year), min(m$year):max(m$year), ordered = T)
m$Action <- factor(m$Action)
m$Animation <- factor(m$Animation)
m$Comedy <- factor(m$Comedy)
m$Drama <- factor(m$Drama)
m$Documentary <- factor(m$Documentary)
m$Romance <- factor(m$Romance)
m$Short <- factor(m$Short)
m$budget <- as.numeric(m$budget)
tm <- treemap(m,
index=c("year", "mpaa"),
vSize="budget",
vColor="mpaa",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
tm <- treemap(m,
index=c("year", "votes"),
vSize="budget",
vColor="mpaa",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
head(m)
m[1,]
m[1,]
m[1,]
m[1:5,]
m[1:10,]
m <- na.omit(movies)
m$year <- factor(m$year, min(m$year):max(m$year), min(m$year):max(m$year), ordered = T)
m$budget <- as.numeric(m$budget)
ifelse(m$Action == 1, "Action", "NotAction")
m$genre <- ifelse(m$Action == 1, "Action",
ifelse(m$Animation == 1, "Animation",
ifelse(m$Comedy == 1, "Comedy",
ifelse(m$Drama == 1, "Drama",
ifelse(m$Documentary == 1, "Documentary",
ifelse(m$Romance ==1, "Romance",
ifelse(m$Short == 1, "Short")))))))
m$genre <- ifelse(m$Action == 1, "Action",
ifelse(m$Animation == 1, "Animation",
ifelse(m$Comedy == 1, "Comedy",
ifelse(m$Drama == 1, "Drama",
ifelse(m$Documentary == 1, "Documentary",
ifelse(m$Romance ==1, "Romance",
ifelse(m$Short == 1, "Short", "")))))))
m <- na.omit(movies)
m$year <- factor(m$year, min(m$year):max(m$year), min(m$year):max(m$year), ordered = T)
m$budget <- as.numeric(m$budget)
m$genre <- ifelse(m$Action == 1, "Action",
ifelse(m$Animation == 1, "Animation",
ifelse(m$Comedy == 1, "Comedy",
ifelse(m$Drama == 1, "Drama",
ifelse(m$Documentary == 1, "Documentary",
ifelse(m$Romance ==1, "Romance",
ifelse(m$Short == 1, "Short", "Other")))))))
tm <- treemap(m,
index=c("year", "genre"),
vSize="budget",
vColor="mpaa",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
tm <- treemap(m,
index=c("year", "genre"),
vSize="budget",
vColor="rating",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "World" )
tm <- treemap(m,
index=c("year", "genre"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "World" )
tm <- treemap(m,
index=c("genre", "mpaa"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "World" )
tm <- treemap(m,
index=c("year", "genre", "mpaa"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "World" )
shiny::runApp('Desktop')
?renderD3tree
runApp('Desktop')
tm <- treemap(dtf=m,
index=c("genre", "mpaa"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "Genres")
runApp('Desktop')
tm <- treemap(dtf=m,
index=c("genre", "mpaa"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "Genres")
runApp('Desktop')
?treemap
RColorBrewer::display.brewer.all()
tm <- treemap(dtf=m,
index=c("genre", "mpaa"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "RdYlBu")
d3tree2(tm, rootname = "Genres")
tm <- treemap(dtf=m,
index=c("genre", "mpaa"),
vSize="budget",
vColor="votes",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
d3tree2(tm, rootname = "Genres")
tm <- treemap(dtf=m,
index=c("genre", "mpaa"),
vSize="votes",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
d3tree2(tm, rootname = "Genres")
tm <- treemap(dtf=m,
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
d3tree2(tm, rootname = "Genres")
tm <- treemap(dtf=subset(m, year == 1991),
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
d3tree2(tm, rootname = "Genres")
8:8
tm <- treemap(dtf=subset(m, year == c(1991, 1992)),
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
tm <- treemap(dtf=subset(m, year %in% c(1991, 1992)),
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
max(m$year)
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
factor_names <- names(sapply(m, is.factor))[sapply(m, is.factor)]
RColorBrewer::display.brewer.all()
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
toupper("bob")
runApp('Desktop')
paste(toupper(substring("genre", 1,1)), substring("genre", 2),
sep="", collapse=" ")
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
paste0(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
cat(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
?paste0
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")[1]
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")[[1]]
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
str(paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep=""))
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype")
runGitHub("MozillaViz-", "usfviz", subdir = "/project-prototype")
?rungithub
?runGitHub
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype/")
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype/app.R")
runGitHub("MozillaViz-", "usfviz")
https://github.com/usfviz/MozillaViz-/tree/master/project-prototype
runGitHub("shiny_example", "rstudio", subdir = "inst/shinyapp/")
runUrl(https://github.com/usfviz/MozillaViz-/tree/master/project-prototype)
runUrl("https://github.com/usfviz/MozillaViz-/tree/master/project-prototype")
runUrl("https://github.com/usfviz/MozillaViz-/tree/master/project-prototype/app.R")
runUrl("https://github.com/usfviz/MozillaViz-/tree/master/project-prototype", ".tar.gz")
runApp('Desktop/MozillaViz-/project-prototype')
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype")
runGitHub(repo = "MozillaViz-", username = "usfviz", subdir = "project-prototype")
runGitHub(repo = "MozillaViz-", username = "usfviz")
runGitHub(repo = "MozillaViz-", username = "usfviz", subdir = "main.R")
runApp('Desktop/MozillaViz-/project-prototype')
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
install.packages("broman")
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
install.packages("lmtest")
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
install.packages("caret")
install.packages("caret")
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
runGitHub(repo = "zdanish1-hw3", username = "usfviz")
runGitHub(repo = "sbhaaf-hw3", username = "usfviz")
runGitHub('msan622', 'cadancai', subdir='final-project')
install.packages("tseries")
install.packages("zoo")
install.packages("quantmod")
install.packages(c("forecast", "scales"))
runGitHub('msan622', 'cadancai', subdir='final-project')
shiny::runGitHub('msan622', 'cadancai', subdir='final-project')
runGitHub("aguimaraesduarte-hw2", "usfviz")
runGitHub("aguimaraesduarte-hw2", "usfviz")
shiny::runGitHub("aguimaraesduarte-hw2", "usfviz")
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('aguimaraesduarte-hw3')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runGitHub('MozillaViz-final', 'usfviz', subdir='project-final')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1] # Get your spark path
.libPaths(c(file.path(spark_path,"libexec", "R", "lib"), .libPaths())) # Navigate to SparkR folder
library(SparkR) # Load the library
sc <- sparkR.init()
sc <- sparkR.session()
shiny::runApp('Desktop/design-of-experiments/Lab2')
?power.t.test()
power.t.test(n=1000, delta=1, sd=5, sig.level=0.05)
power.t.test(delta=1, sd=5, sig.level=0.05, power=0.9)
?anova
a <- function(x) 1-exp(-x)
exp(c(1,2,3))
a(seq(0,0.2,0.001))
y <- a(seq(0,0.2,0.001))
x <- seq(0, 0.2, 0.001)
plot(x, y)
plot(x, y, type="l")
x <- seq(0, 1, 0.001)
y <- a(x)
plot(x, y, type="l")
lines(y=x, color="red")
lines(x, x, color="red")
lines(x, x, col="red")
shiny::runApp('Desktop/design-of-experiments/Lab2')
runApp('Desktop/design-of-experiments/Lab2')
shiny::runApp('Desktop/design-of-experiments/Lab2')
library(DoE.base)
install.packages("DoE.base")
library(DoE.base)
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = 1)
data.frame(X)
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = )
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = 2)
data.frame(X)
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = 2, )
setwd(dir = "~/Desktop/design-of-experiments/Final")
data <- read.table(file = "retail.txt", header = T, sep = " ")
A <- data$A
B <- data$B
par(mfrow=c(2,1))
xmin <- min(min(A), min(B))
xmax <- max(max(A), max(B))
hist(A, xlim = c(xmin, xmax), main = "Purchase prices", xlab = "Variant A")
abline(v = mean(A), col = "red", lwd = 2)
hist(B, xlim = c(xmin, xmax), main = "", xlab = "Variant B")
abline(v = mean(B), col = "red", lwd = 2)
# Do standard deviations seem similar?
sd(A)
sd(B)
## One-sided test Ha: muA > muB
t.test(x = A, y = B, alternative = "greater", mu = 0, paired = F, var.equal = T, conf.level = 0.95)
power.t.test(1000, 1, 5, .95)
power.t.test(n = 1000, delta = 1, sd = 5, sig.level = .95)
power.t.test(delta = 1, sd = 5, sig.level = .95, power = 0.9)
power.t.test(n = 1000, delta = 1, sd = 5, sig.level = .95, alternative = "greater")
power.t.test(n = 1000, delta = 1, sd = 5, sig.level = .95, alternative = "one.sided")
power.t.test(n=1000, delta=1, sd=5, sig.level=0.05)
power.t.test(n=1000, delta=1, sd=5, sig.level=0.05, alternative = "one.sided")
power.t.test(n = 1000, delta = 1, sd = 5, sig.level = 0.05, alternative = "one.sided")
power.t.test(delta=1, sd=5, sig.level=0.05, power = 0.9, alternative = "one.sided")
power.prop.test(p1 = 0.78, p2 = 0.84, sig.level = 0.05, power = 0.95)
power.prop.test(p1 = 0.78, p2 = 0.84, sig.level = 0.05, power = 0.95, alternative = "two.sided")
set.seed(10)
grp1 <- rnorm(n = 100, mean = 0, sd = 10)
grp2 <- rnorm(n = 100, mean = 10, sd = 10)
setwd(dir = "~/Desktop/design-of-experiments/Final")
data <- read.table(file = "candycrush.txt", header = T, sep = "\t")
grp1 <- subset(data, booster == 1)$time
grp2 <- subset(data, booster == 2)$time
grp3 <- subset(data, booster == 3)$time
par(mfrow = c(3, 1))
hist(grp1, main = "Group 1 Observations")
abline(v = mean(grp1), col = "red", lwd = 2)
hist(grp2, main = "Group 2 Observations")
abline(v = mean(grp2), col = "red", lwd = 2)
hist(grp3, main = "Group 3 Observations")
abline(v = mean(grp3), col = "red", lwd = 2)
m <- lm(time ~ as.factor(booster), data = data)
summary(m)
anova(m)
k <- 3
alpha <- 0.05
alpha.bonferroni <- alpha/k
t.test(x = grp1,
y = grp2,
alternative = "less",
mu = 0,
paired = F,
var.equal = T,
conf.level = 1-alpha.bonferroni)
t.test(x = grp1,
y = grp3,
alternative = "less",
mu = 0,
paired = F,
var.equal = T,
conf.level = 1-alpha.bonferroni)
t.test(x = grp2,
y = grp3,
alternative = "less",
mu = 0,
paired = F,
var.equal = T,
conf.level = 1-alpha.bonferroni)
setwd("~/Desktop/design-of-experiments/Final/")
data <- read.csv(file = "instagram-factorial.csv", header = T)
Time <- data$Time
Prevalence <- factor(data$Prevalence)
Type <- factor(data$Type, levels = c(0,1), labels = c("Photo", "Video"))
library(gplots)
par(mfrow = c(1,2))
boxplot(Time ~ Prevalence, main = "Boxplot of Engagement Time by Ad Prevalence", xlab = "Ad Prevalence", ylab = "Time Engaged (s)")
plotmeans(Time ~ Prevalence, main = "Main Effect Plot of Engagement Time by Ad Prevalence", xlab = "Ad Prevalence", ylab = "Time Engaged (s)")
boxplot(Time ~ Type, main = "Boxplot of Engagement Time by Ad Type", xlab = "Ad Type", ylab = "Time Engaged (s)")
plotmeans(Time ~ Type, main = "Main Effect Plot of Engagement Time by Ad Type", xlab = "Ad Type", ylab = "Time Engaged (s)")
par(mfrow = c(1,1))
interaction.plot(Prevalence, Type, Time, main = "Interaction Between Ad Prevalence and Ad Type", ylab = "Mean Engagement Time (s)", xlab = "Ad Prevalence")
model <- lm(Time ~ Prevalence * Type)
anova(model)
summary(model)
par(mfrow = c(2,2))
hist(model$residuals, main = "Histogram of Residuals", xlab = "")
qqnorm(model$residuals, main = "QQ-Plot of Residuals")
qqline(model$residuals, col = "red")
plot(model$residuals, main = "Residuals vs. Order", ylab = "Residuals")
abline(h = 0, col = "red")
plot(model$fitted, model$residuals, main = "Residuals vs. Fitted Values", ylab = "Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
