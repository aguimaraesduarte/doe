theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=5))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=10))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=15))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=15),
legend.title = element_text(size=20))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=15),
legend.title = element_text(size=18))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=22),
axis.title = element_text(size=15),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=18),
legend.title = element_text(size=20))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Art Style")) +
theme(plot.title = element_text(hjust=0.5, size=22),
axis.title = element_text(size=18),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=18),
legend.title = element_text(size=20))
x <- data.frame(PCA_3=xs, PCA_4=ys)
x$Customer_Type = c(rep('Extra Storage', 60), rep('Big Screen',50), rep('Great Camera',150))
ggplot(x, aes(x=PCA_3, y=PCA_4, color=Customer_Type)) + geom_point(size=3) +
labs(title = 'Customer Types Against First Two Principal Components', x='PCA 1', y='PCA 2') +
guides(color=guide_legend(title="Favorite Feature")) +
theme(plot.title = element_text(hjust=0.5, size=22),
axis.title = element_text(size=18),
legend.position = c(0.8, 0.82),
legend.text = element_text(size=18),
legend.title = element_text(size=20))
library(MBESS)
installed.packages('MBESS')
smd_plot <- data.frame()
for(i in seq(10,400, by=10)) { # loop
x.ci <- ci.smd(smd=0.8, n.1=i,n.2=i)
smd_plot <- rbind(smd_plot, data.frame("lwr" = x.ci$Lower.Conf.Limit.smd,
"upr" = x.ci$Upper.Conf.Limit.smd, "smd"=0.8, "n" = i))
}
install.packages('MBESS')
smd_plot <- data.frame()
for(i in seq(10,400, by=10)) { # loop
x.ci <- ci.smd(smd=0.8, n.1=i,n.2=i)
smd_plot <- rbind(smd_plot, data.frame("lwr" = x.ci$Lower.Conf.Limit.smd,
"upr" = x.ci$Upper.Conf.Limit.smd, "smd"=0.8, "n" = i))
}
smd_plot$range <- round(smd_plot$upr - smd_plot$lwr,2)
??ci.smd
library(MBESS)
smd_plot <- data.frame()
for(i in seq(10,400, by=10)) { # loop
x.ci <- ci.smd(smd=0.8, n.1=i,n.2=i)
smd_plot <- rbind(smd_plot, data.frame("lwr" = x.ci$Lower.Conf.Limit.smd,
"upr" = x.ci$Upper.Conf.Limit.smd, "smd"=0.8, "n" = i))
}
smd_plot$range <- round(smd_plot$upr - smd_plot$lwr,2)
# ggplot --------------------------------------------------------------------
ggplot(smd_plot, aes(n, smd)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr)) +
geom_text(aes(label=range, y=upr), hjust=-0.4, angle=45, size=4) +
scale_y_continuous(breaks=seq(0,2, by=0.25)) +
scale_x_continuous(breaks=seq(0,400, by=20)) +
ylim(-.2,1.8)
ggplot(smd_plot, aes(n, smd)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr)) +
geom_text(aes(label=range, y=upr), hjust=-0.4, angle=45, size=4) +
scale_y_continuous(breaks=seq(0,2, by=0.25)) +
scale_x_continuous(breaks=seq(0,400, by=20)) +
ylim(-.2,1.8) + labs(title='Confidence Intervals of a Difference of Two Means',
x= 'Sample Size', y='Confidence Interval')
ggplot(smd_plot, aes(n, smd)) +
geom_point() +
geom_errorbar(aes(ymin=lwr, ymax=upr)) +
geom_text(aes(label=range, y=upr), hjust=-0.4, angle=45, size=4) +
scale_y_continuous(breaks=seq(0,2, by=0.25)) +
scale_x_continuous(breaks=seq(0,400, by=20)) +
ylim(-.2,1.8) + labs(title='Confidence Intervals of a Difference of Two Means',
x= 'Sample Size', y='Confidence Interval') +
theme(plot.title = element_text(hjust=0.5, size=20),
axis.title = element_text(size=15))
packageList = c('treemap', 'd3treeR', 'data.tree', 'reshape', 'magrittr', 'ggplot2movies')
for (i in 1:length(packageList)) {
if(! is.element(packageList[i],installed.packages()[,1])) {
install.packages(packageList[i])
}
}
library(treemap)
library(d3treeR)
library(data.tree)
library(reshape)
library(magrittr)
library(ggplot2movies)
?extract_legend
m <- as.data.frame(na.omit(movies))
keep_vars <- c('title', 'year', 'length',
'budget', 'rating', 'votes', 'mpaa',
'Action', 'Animation', 'Comedy', 'Drama', 'Documentary', 'Romance', 'Short')
df <- m[,names(m) %in% keep_vars]
mdf <- melt(df, id.vars=c('title', 'year', 'length',
'budget', 'rating', 'votes', 'mpaa'))
mdf <- mdf[mdf$value == 1,]
mdf$value <- NULL
names(mdf)[ncol(mdf)] <- 'genre'
mdf$budget <- mdf$budget / 1000000
getData <- function() {
return(mdf %>% subset(year == 2000))
}
tree_df <- getData()
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'categorical',
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
View(mdf)
View(tree_df)
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'categorical',
format.legend = list(scientific = FALSE, big.mark = " "),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
tree_df$rating
factor(tree_df$rating)
tree_df$mpaa
factor(tree_df$mpaa)
?oredred
?ordered
ordered(tree_df$mpaa)
mdf$mpaa[mdf$mpaa == ''] <- 'missing'
ordered(tree_df$mpaa)
tree_df <- getData()
ordered(tree_df$mpaa)
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'categorical',
format.legend = list(scientific = FALSE, big.mark = " "),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
mdf$mpaa <- ordered(tree_df$mpaa)
mdf$mpaa <- ordered(mdf$mpaa)
tree_df <- getData()
tree_df$mpaa
tree_df <- getData()
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'categorical',
format.legend = list(scientific = FALSE, big.mark = " "),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
numMpaa <- function(x) {
if(x == ' ') {
return (0.0)
} else if(x == 'PG') {
return (0.3)
} else if(x == 'PG 13') {
return (0.5)
} else if(x == 'R') {
return (0.8)
} else {
return (1.0)
}
}
mdf$mpaa <- sapple(mdf$mpaa, numMpaa)
mdf$mpaa <- sapply(mdf$mpaa, numMpaa)
mdf$mpaa
?treemap
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
palette="-RdGy"
format.legend = list(scientific = FALSE, big.mark = " "),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
palette="-RdGy",
format.legend = list(scientific = FALSE, big.mark = " "),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value'
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
numMpaa <- function(x) {
if(x == ' ') {
return (0.0)
} else if(x == 'PG') {
return (-1)
} else if(x == 'PG 13') {
return (-0.5)
} else if(x == 'R') {
return (0.5)
} else {
return (1.0)
}
}
mdf <- mdf[mdf$value == 1,]
mdf$value <- NULL
names(mdf)[ncol(mdf)] <- 'genre'
mdf$budget <- mdf$budget / 1000000
mdf$mpaa[mdf$mpaa == ''] <- 'missing'
mdf$mpaa <- sapply(mdf$mpaa, numMpaa)
m <- as.data.frame(na.omit(movies))
keep_vars <- c('title', 'year', 'length',
'budget', 'rating', 'votes', 'mpaa',
'Action', 'Animation', 'Comedy', 'Drama', 'Documentary', 'Romance', 'Short')
df <- m[,names(m) %in% keep_vars]
mdf <- melt(df, id.vars=c('title', 'year', 'length',
'budget', 'rating', 'votes', 'mpaa'))
numMpaa <- function(x) {
if(x == ' ') {
return (0.0)
} else if(x == 'PG') {
return (-1)
} else if(x == 'PG 13') {
return (-0.5)
} else if(x == 'R') {
return (0.5)
} else {
return (1.0)
}
}
mdf <- mdf[mdf$value == 1,]
mdf$value <- NULL
names(mdf)[ncol(mdf)] <- 'genre'
mdf$budget <- mdf$budget / 1000000
mdf$mpaa[mdf$mpaa == ''] <- 'missing'
mdf$mpaa <- sapply(mdf$mpaa, numMpaa)
View(mdf)
getData <- function() {
return(mdf %>% subset(year == input$year))
}
tree_df <- getData()
movie_tree <- treemap(tree_df,
getData <- function() {
return(mdf %>% subset(year == 2000))
}
)
getData <- function() {
return(mdf %>% subset(year == 2000)) }
tree_df <- getData()
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
View(tree_df)
summary(mdf$budget)
shiny::runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
unique(mdf$year)
runApp('Module4/Data_Viz/Labs/movie-tree')
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
range=c(-1,1)
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
range=c(-1,1),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
movie_tree <- treemap(tree_df,
index=c("genre", "title"),
vSize="budget",
vColor = 'mpaa',
type = 'value',
range=c(-10,10),
draw = F)
d3tree2(movie_tree, rootname = "Movies" )
mdf[mdf$title=='Little Nicky', ]
runApp('Module4/Data_Viz/Labs/movie-tree')
subset(tree_df, "mpaa_num" > 0.5)
subset(tree_df, mpaa_num > 0.5)
names(tree_df)
subset(tree_df, "year" > 0.5)
subset(tree_df, "year" > 2015)
subset(tree_df, year > 2015)
subset(tree_df, as.name("year") > 2015)
runApp('Module4/Data_Viz/Labs/movie-tree')
subset(mdf, year == 1913)
library(treemap)
library(d3treeR)
library(data.tree)
library(reshape)
library(magrittr)
library(ggplot2movies)
m <- as.data.frame(na.omit(movies))
keep_vars <- c('title', 'year', 'length',
'budget', 'rating', 'votes', 'mpaa',
'Action', 'Animation', 'Comedy', 'Drama', 'Documentary', 'Romance', 'Short')
num_vars <- c('budget', 'rating', 'votes', 'length')
df <- m[,names(m) %in% keep_vars]
mdf <- melt(df, id.vars=c('title', 'year', 'length',
'budget', 'rating', 'votes', 'mpaa'))
numMpaa <- function(x) {
if(x == 'missing') {
return (0.0)
} else if(x == 'PG') {
return (1.0)
} else if(x == 'PG 13') {
return (0.5)
} else if(x == 'R') {
return (-0.5)
} else {
return (-1.0)
}
}
mdf <- mdf[mdf$value == 1,]
mdf$value <- NULL
names(mdf)[ncol(mdf)] <- 'genre'
mdf$budget <- mdf$budget / 1000000
mdf$mpaa[mdf$mpaa == ''] <- 'missing'
mdf$mpaa_num <- sapply(mdf$mpaa, numMpaa)
View(mdf)
getData <- function() {
return(mdf %>% subset(year == input$year))
}
getData <- function() {
getData <- function(yr) {
return(mdf %>% subset(year == yr))
}
runApp('Module4/Data_Viz/Labs/movie-tree')
asklfjlf
)
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
subset(mdf, year = 1908)
subset(mdf, year == 1908)
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
?d3tree2
runApp('Module4/Data_Viz/Labs/movie-tree')
subset(mdf, year=2008)
subset(mdf, year==2008)
subset(mdf, year==1908)
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
?d3tree2Output
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
?treemap
?tmPlot
tmLocate
??tmLocate
tmLocate <-
function(coor, tmSave) {
tm <- tmSave$tm
# retrieve selected rectangle
rectInd <- which(tm$x0 < coor[1] &
(tm$x0 + tm$w) > coor[1] &
tm$y0 < coor[2] &
(tm$y0 + tm$h) > coor[2])
return(tm[rectInd[1], ])
}
runApp('Module4/Data_Viz/Labs/movie-tree')
?plotoutput
?plotOutput
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
?d3tree3
?treemap
runApp('Module4/Data_Viz/Labs/movie-tree')
runApp('Module4/Data_Viz/Labs/movie-tree')
?ci.smd
??ci.smd
?smd
??smd
??ci.smd
library(devtools)
shiny::runGitHub("floondi-hw3", "usfviz", subdir = "app.R")
shiny::runGitHub("sheri314-hw3", "usfviz", subdir = "app.R")
shiny::runGitHub("sheri314-hw3", "usfviz", subdir = "app.R")
shiny::runApp('Module4/Data_Viz/Currency-Run/shiny-app')
runApp('Module4/Data_Viz/Currency-Run/shiny-app')
shiny::runApp('Module4/Data_Viz/Currency-Run/shiny-app')
runApp('Module4/Data_Viz/Currency-Run/shiny-app')
View(df_trades)
runApp('Module4/Data_Viz/Currency-Run/shiny-app')
View(df_trades)
runApp('Module4/Data_Viz/Currency-Run/shiny-app')
runApp('Module4/Data_Viz/Currency-Run/shiny-app')
shiny::runGitHub("Exchange-visualizers-final", "usfviz", subdir = "shiny-app")
setwd("~/Desktop/lab2")
?uioutput
??uioutput
shiny::runApp()
runApp()
runApp()
runApp()
?name
tst = TRUE
tst2 = False
tst2 = FALSE
tst3 = FALSE
x = c(tst, tst2, tst3)
which(x)
tst1 = TRUE
tst2 = FALSE
tst3 = FALSE
paste(tst, which(x))
paste('tst', which(x), sep='')
name(paste('tst', which(x), sep=''))
as.symbol(paste('tst', which(x), sep=''))
as.symbol(paste('tst', which(x), sep='')) == T
as.symbol(paste('tst', which(x), sep='')) == F
??prop
?stats::power.t.test()
?power.t.test()
runApp()
runApp()
power.t.test(n=NULL, delta=0.1, sig.level=0.05, power=0.9)
power.t.test(n=NULL, delta=0.1, sig.level=0.05, power=0.9)$n
runApp()
shiny::runApp('~/Desktop/lab2')
