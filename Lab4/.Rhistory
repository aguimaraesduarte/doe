tm <- treemap(dtf=subset(m, year == 1991),
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
d3tree2(tm, rootname = "Genres")
8:8
tm <- treemap(dtf=subset(m, year == c(1991, 1992)),
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
tm <- treemap(dtf=subset(m, year %in% c(1991, 1992)),
index=c("genre", "mpaa"),
vSize="budget",
vColor="budget",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "),
palette = "YlOrRd")
max(m$year)
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
factor_names <- names(sapply(m, is.factor))[sapply(m, is.factor)]
RColorBrewer::display.brewer.all()
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
toupper("bob")
runApp('Desktop')
paste(toupper(substring("genre", 1,1)), substring("genre", 2),
sep="", collapse=" ")
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
paste0(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
cat(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
?paste0
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")[1]
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")[[1]]
paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep="")
str(paste(toupper(substring("genre", 1,1)), substring("genre", 2), sep=""))
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype")
runGitHub("MozillaViz-", "usfviz", subdir = "/project-prototype")
?rungithub
?runGitHub
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype/")
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype/app.R")
runGitHub("MozillaViz-", "usfviz")
https://github.com/usfviz/MozillaViz-/tree/master/project-prototype
runGitHub("shiny_example", "rstudio", subdir = "inst/shinyapp/")
runUrl(https://github.com/usfviz/MozillaViz-/tree/master/project-prototype)
runUrl("https://github.com/usfviz/MozillaViz-/tree/master/project-prototype")
runUrl("https://github.com/usfviz/MozillaViz-/tree/master/project-prototype/app.R")
runUrl("https://github.com/usfviz/MozillaViz-/tree/master/project-prototype", ".tar.gz")
runApp('Desktop/MozillaViz-/project-prototype')
runGitHub("MozillaViz-", "usfviz", subdir = "project-prototype")
runGitHub(repo = "MozillaViz-", username = "usfviz", subdir = "project-prototype")
runGitHub(repo = "MozillaViz-", username = "usfviz")
runGitHub(repo = "MozillaViz-", username = "usfviz", subdir = "main.R")
runApp('Desktop/MozillaViz-/project-prototype')
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
install.packages("broman")
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
install.packages("lmtest")
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
install.packages("caret")
install.packages("caret")
runGitHub(repo = "brigitlg-hw3", username = "usfviz")
runGitHub(repo = "zdanish1-hw3", username = "usfviz")
runGitHub(repo = "sbhaaf-hw3", username = "usfviz")
runGitHub('msan622', 'cadancai', subdir='final-project')
install.packages("tseries")
install.packages("zoo")
install.packages("quantmod")
install.packages(c("forecast", "scales"))
runGitHub('msan622', 'cadancai', subdir='final-project')
shiny::runGitHub('msan622', 'cadancai', subdir='final-project')
runGitHub("aguimaraesduarte-hw2", "usfviz")
runGitHub("aguimaraesduarte-hw2", "usfviz")
shiny::runGitHub("aguimaraesduarte-hw2", "usfviz")
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('aguimaraesduarte-hw3')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
runApp('Desktop/MozillaViz-/project-prototype')
shiny::runGitHub('MozillaViz-final', 'usfviz', subdir='project-final')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
shiny::runApp('Desktop/MozillaViz-/project-prototype')
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1] # Get your spark path
.libPaths(c(file.path(spark_path,"libexec", "R", "lib"), .libPaths())) # Navigate to SparkR folder
library(SparkR) # Load the library
sc <- sparkR.init()
sc <- sparkR.session()
shiny::runApp('Desktop/design-of-experiments/Lab2')
?power.t.test()
power.t.test(n=1000, delta=1, sd=5, sig.level=0.05)
power.t.test(delta=1, sd=5, sig.level=0.05, power=0.9)
?anova
a <- function(x) 1-exp(-x)
exp(c(1,2,3))
a(seq(0,0.2,0.001))
y <- a(seq(0,0.2,0.001))
x <- seq(0, 0.2, 0.001)
plot(x, y)
plot(x, y, type="l")
x <- seq(0, 1, 0.001)
y <- a(x)
plot(x, y, type="l")
lines(y=x, color="red")
lines(x, x, color="red")
lines(x, x, col="red")
shiny::runApp('Desktop/design-of-experiments/Lab2')
runApp('Desktop/design-of-experiments/Lab2')
shiny::runApp('Desktop/design-of-experiments/Lab2')
library(DoE.base)
install.packages("DoE.base")
library(DoE.base)
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = 1)
data.frame(X)
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = )
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = 2)
data.frame(X)
X <- fac.design(factor.names=list(x1=c(-1,1), x2=c(-1,1),
x3=c(-1,1), x4=c(-1,1)),
randomize = FALSE, replications = 2, )
results <- read.table('response.txt', sep=' ', header=TRUE)
lyft <- read.table('design.txt', sep='\t', header=TRUE)
setwd("~/Desktop/design-of-experiments/Lab4/")
results <- read.table('response.txt', sep=' ', header=TRUE)
lyft <- read.table('design.txt', sep='\t', header=TRUE)
lyft$y <- results$y
colnames(lyft) <- c('A', 'B', 'C', 'D', 'y')
lyft$AB <- lyft$A*lyft$B
lyft$AC <- lyft$A*lyft$C
lyft$AD <- lyft$A*lyft$D
lyft$BC <- lyft$B*lyft$C
lyft$BD <- lyft$B*lyft$D
lyft$CD <- lyft$C*lyft$D
m <- lm(y ~ ., data=lyft)
summary(m)
anova(m)
confint(m)
qqnorm(lyft$y)
qqline(lyft$y, col = 2)
boxplot(lyft$y, horizontal=TRUE, main="Box Plot", xlab="Booking rate")
hist(lyft$y, main="Histogram", xlab="Booking rate")
par(bg=rgb(1,1,0.8), mfrow=c(2,2))
qqnorm(lyft$y)
par(mfrow=c(1,1))
qqnorm(lyft$y)
par(bg=rgb(1,1,1))
qqnorm(lyft$y)
qqline(lyft$y, col = 2)
boxplot(lyft$y, horizontal=TRUE, main="Box Plot", xlab="Booking rate")
boxplot(lyft$y, horizontal=TRUE, main="Box Plot of Booking rate", xlab="Booking rate")
hist(lyft$y, main="Histogram", xlab="Booking rate")
hist(lyft$y, main="Histogram of Booking rate", xlab="Booking rate")
library(gplots)
par(mfrow = c(1,2))
boxplot(lyft$y ~ lyft$A, main = "Boxplot of Booking rate by Discount amount", xlab = "Discount amount", ylab = "Booking rate")
plotmeans(lyft$y ~ lyft$A, main = "Main Effect Plot of Booking rate by Discount amount", xlab = "Discount amount", ylab = "Booking rate")
boxplot(lyft$y ~ lyft$B, main = "Boxplot of Booking rate by Discount duration", xlab = "Discount duration (days)", ylab = "Booking rate")
plotmeans(lyft$y ~ lyft$B, main = "Main Effect Plot of Booking rate by Discount duration", xlab = "Discount duration (days)", ylab = "Booking rate")
boxplot(lyft$y ~ lyft$C, main = "Boxplot of Booking rate by Method of dissemination", xlab = "Method of dissemination", ylab = "Booking rate")
plotmeans(lyft$y ~ lyft$C, main = "Main Effect Plot of Booking rate by Method of dissemination", xlab = "Method of dissemination", ylab = "Booking rate")
boxplot(lyft$y ~ lyft$D, main = "Boxplot of Booking rate by Ride type", xlab = "Ride type", ylab = "Booking rate")
plotmeans(lyft$y ~ lyft$D, main = "Main Effect Plot of Booking rate by Ride type", xlab = "Ride type", ylab = "Booking rate")
par(mfrow=c(1,1))
effects <- 2*m$coefficients[2:length(m$coefficients)]
q <- qqnorm(effects, main = "QQ-Plot of Effects")
qqline(effects)
abs(q$y)[order(-abs(q$y))] #figure out which effects are the ones lying away from the line
anova(m)
summary(m)
m2 <- lm(y ~ A+B+C+D+A:B+A:D, data=lyft)
summary(m)
summary(m2)
anova(m2)
confint(m2)
summary(m)
summary(m2)
par(mfrow=c(2,2), oma = c(0,0,2,0))
plotmeans(formula = y~A, ylab = "Booking Rate", xlab = "Discount amount (A)")
plotmeans(formula = y~A, ylab = "Booking Rate", xlab = "Discount amount (A)", data=lyft)
plotmeans(formula = y~B, ylab = "Booking Rate", xlab = "Discount duration (B)", data=lyft)
plotmeans(formula = y~C, ylab = "Booking Rate", xlab = "Method of dissemination (C)", data=lyft)
plotmeans(formula = y~D, ylab = "Booking Rate", xlab = "Ride type (D)", data=lyft)
mtext("Main Effect Plots", outer = TRUE, cex = 1.5)
par(mfrow=c(2,1))
interaction.plot(A, B, y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction")
interaction.plot(A, D, y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction")
interaction.plot(A, B, y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction", data=lyft)
interaction.plot(A, D, y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction", data=lyft)
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction")
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction")
par(mfrow=c(1,2))
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction")
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction")
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction", legend = TRUE)
par(mfrow=c(2,1))
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction", legend = TRUE)
par(mfrow=c(1,2), oma = c(0,0,2,0))
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction", legend = TRUE)
resp.surf <- function(x1, x2, x3, x4, model){
beta <- as.numeric(model$coefficients)
y.hat <- beta[1] + beta[2]*x1 + beta[3]*x2 + beta[4]*x3 + beta[5]*x4 + beta[6]*x1*x2 + beta[7]*x1*x4
return(y.hat)
}
fitted <- matrix(0, nrow = 16, ncol = 1)
fitted <- matrix(0, nrow = 16, ncol = 1)
for(i in 1:16){
x1 <- lyft[i, 1]
x2 <- lyft[i, 2]
x3 <- lyft[i, 3]
x4 <- lyft[i, 4]
fitted[i] <- resp.surf(x1, x2, x3, x4, m2)
}
d <- data.frame(lyft[,1:4], fitted)
d[order(-d$fitted),][1,]
par(mfrow = c(2,2))
par(mfrow = c(2,2))
hist(m2$residuals, main = "Histogram of Residuals", xlab = "")
qqnorm(m2$residuals, main = "QQ-Plot of Residuals")
qqline(m2$residuals, col = "red")
plot(m2$residuals, main = "Residuals vs. Order", ylab = "Residuals")
abline(h = 0, col = "red")
plot(model.red$fitted, m2$residuals, main = "Residuals vs. Fitted Values", ylab = "Residuals", xlab = "Fitted Values")
plot(m2$fitted, m2$residuals, main = "Residuals vs. Fitted Values", ylab = "Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
par(mfrow=c(2,3), oma = c(0,0,2,0))
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$C, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:C Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction", legend = TRUE)
interaction.plot(lyft$B, lyft$C, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount duration (B)", main = "B:C Interaction", legend = TRUE)
interaction.plot(lyft$B, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount duration (B)", main = "B:D Interaction", legend = TRUE)
interaction.plot(lyft$C, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Method of dissemination (C)", main = "C:D Interaction", legend = TRUE)
resp.surf <- function(x1, x2, x3, x4, model){
beta <- as.numeric(model$coefficients)
y.hat <- beta[1] + beta[2]*x1 + beta[3]*x2 + beta[4]*x3 + beta[5]*x4 +
beta[6]*x1*x2 + beta[7]*x1*x3 + beta[8]*x1*x4 + beta[9]*x2*x3 + beta[10]*x2*x4 +
beta[11]*x3*x4
return(y.hat)
}
fitted <- matrix(0, nrow = 16, ncol = 1)
for(i in 1:16){
x1 <- lyft[i, 1]
x2 <- lyft[i, 2]
x3 <- lyft[i, 3]
x4 <- lyft[i, 4]
fitted[i] <- resp.surf(x1, x2, x3, x4, m)
}
d <- data.frame(lyft[,1:4], fitted)
d[order(-d$fitted),][1,]
par(mfrow = c(2,2))
hist(m$residuals, main = "Histogram of Residuals", xlab = "")
qqnorm(m$residuals, main = "QQ-Plot of Residuals")
qqline(m$residuals, col = "red")
plot(m$residuals, main = "Residuals vs. Order", ylab = "Residuals")
abline(h = 0, col = "red")
plot(m$fitted, m2$residuals, main = "Residuals vs. Fitted Values", ylab = "Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
par(mfrow=c(1,1))
effects <- 2*m$coefficients[2:length(m$coefficients)]
q <- qqnorm(effects, main = "QQ-Plot of Effects")
qqline(effects)
abs(q$y)[order(-abs(q$y))] #figure out which effects are the ones lying away from the line
results <- read.table('response.txt', sep=' ', header=TRUE)
lyft <- read.table('design.txt', sep='\t', header=TRUE)
lyft$y <- results$y
colnames(lyft) <- c('A', 'B', 'C', 'D', 'y')
lyft$AB <- lyft$A*lyft$B
lyft$AC <- lyft$A*lyft$C
lyft$AD <- lyft$A*lyft$D
lyft$BC <- lyft$B*lyft$C
lyft$BD <- lyft$B*lyft$D
lyft$CD <- lyft$C*lyft$D
lyft$ABC <- lyft$AB*lyft$C
lyft$ABD <- lyft$AB*lyft$D
lyft$BCD <- lyft$BC*lyft$D
lyft$ABCD <- lyft$AB*lyft$CD
m <- lm(y ~ ., data=lyft)
summary(m)
anova(m)
confint(m)
par(mfrow=c(1,1))
effects <- 2*m$coefficients[2:length(m$coefficients)]
q <- qqnorm(effects, main = "QQ-Plot of Effects")
qqline(effects)
abs(q$y)[order(-abs(q$y))] #figure out which effects are the ones lying away from the line
results <- read.table('response.txt', sep=' ', header=TRUE)
lyft <- read.table('design.txt', sep='\t', header=TRUE)
lyft$y <- results$y
colnames(lyft) <- c('A', 'B', 'C', 'D', 'y')
lyft$AB <- lyft$A*lyft$B
lyft$AC <- lyft$A*lyft$C
lyft$AD <- lyft$A*lyft$D
lyft$BC <- lyft$B*lyft$C
lyft$BD <- lyft$B*lyft$D
lyft$CD <- lyft$C*lyft$D
lyft$ABC <- lyft$AB*lyft$C
lyft$ABD <- lyft$AB*lyft$D
lyft$ACD <- lyft$AC*lyft$D
lyft$BCD <- lyft$BC*lyft$D
lyft$ABCD <- lyft$AB*lyft$CD
m <- lm(y ~ ., data=lyft)
summary(m)
anova(m)
confint(m)
par(mfrow=c(1,1))
effects <- 2*m$coefficients[2:length(m$coefficients)]
q <- qqnorm(effects, main = "QQ-Plot of Effects")
qqline(effects)
abs(q$y)[order(-abs(q$y))] #figure out which effects are the ones lying away from the line
library(gplots)
results <- read.table('response.txt', sep=' ', header=TRUE)
lyft <- read.table('design.txt', sep='\t', header=TRUE)
lyft$y <- results$y
colnames(lyft) <- c('A', 'B', 'C', 'D', 'y')
lyft$AB <- lyft$A*lyft$B
lyft$AC <- lyft$A*lyft$C
lyft$AD <- lyft$A*lyft$D
lyft$BC <- lyft$B*lyft$C
lyft$BD <- lyft$B*lyft$D
lyft$CD <- lyft$C*lyft$D
#lyft$ABC <- lyft$AB*lyft$C
#lyft$ABD <- lyft$AB*lyft$D
#lyft$ACD <- lyft$AC*lyft$D
#lyft$BCD <- lyft$BC*lyft$D
#lyft$ABCD <- lyft$AB*lyft$CD
m <- lm(y ~ ., data=lyft)
summary(m)
anova(m)
confint(m)
# QQ-plot of effects
par(mfrow=c(1,1))
effects <- 2*m$coefficients[2:length(m$coefficients)]
q <- qqnorm(effects, main = "QQ-Plot of Effects")
qqline(effects)
abs(q$y)[order(-abs(q$y))] #figure out which effects are the ones lying away from the line
## Main effects plots
library(gplots)
par(mfrow=c(2,2), oma = c(0,0,2,0))
plotmeans(formula = y~A, ylab = "Booking Rate", xlab = "Discount amount (A)", data=lyft)
plotmeans(formula = y~B, ylab = "Booking Rate", xlab = "Discount duration (B)", data=lyft)
plotmeans(formula = y~C, ylab = "Booking Rate", xlab = "Method of dissemination (C)", data=lyft)
plotmeans(formula = y~D, ylab = "Booking Rate", xlab = "Ride type (D)", data=lyft)
mtext("Main Effect Plots", outer = TRUE, cex = 1.5)
par(mfrow=c(2,3), oma = c(0,0,2,0))
interaction.plot(lyft$A, lyft$B, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:B Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$C, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:C Interaction", legend = TRUE)
interaction.plot(lyft$A, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount amount (A)", main = "A:D Interaction", legend = TRUE)
interaction.plot(lyft$B, lyft$C, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount duration (B)", main = "B:C Interaction", legend = TRUE)
interaction.plot(lyft$B, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Discount duration (B)", main = "B:D Interaction", legend = TRUE)
interaction.plot(lyft$C, lyft$D, lyft$y, ylab = "Mean Booking Rate", xlab = "Method of dissemination (C)", main = "C:D Interaction", legend = TRUE)
resp.surf <- function(x1, x2, x3, x4, model){
beta <- as.numeric(model$coefficients)
y.hat <- beta[1] + beta[2]*x1 + beta[3]*x2 + beta[4]*x3 + beta[5]*x4 +
beta[6]*x1*x2 + beta[7]*x1*x3 + beta[8]*x1*x4 + beta[9]*x2*x3 + beta[10]*x2*x4 +
beta[11]*x3*x4
return(y.hat)
}
fitted <- matrix(0, nrow = 16, ncol = 1)
for(i in 1:16){
x1 <- lyft[i, 1]
x2 <- lyft[i, 2]
x3 <- lyft[i, 3]
x4 <- lyft[i, 4]
fitted[i] <- resp.surf(x1, x2, x3, x4, m)
}
d <- data.frame(lyft[,1:4], fitted)
d[order(-d$fitted),][1,]
# Residual Analysis
par(mfrow = c(2,2))
hist(m$residuals, main = "Histogram of Residuals", xlab = "")
qqnorm(m$residuals, main = "QQ-Plot of Residuals")
qqline(m$residuals, col = "red")
plot(m$residuals, main = "Residuals vs. Order", ylab = "Residuals")
abline(h = 0, col = "red")
plot(m$fitted, m2$residuals, main = "Residuals vs. Fitted Values", ylab = "Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
